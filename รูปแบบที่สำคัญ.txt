// import รูปบนเว็บ
import 'package:image_picker/image_picker.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
String? _imagePath;        
  Future<void> _getImageFromGallery() async {
    final ImagePicker picker = ImagePicker();
    final XFile? pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        _imagePath = pickedFile.path;
      });
    } else {
      print('No image selected.');
    }
  }

//นำไปใช้
      _imagePath == null
                ? Text('No image selected.')
                : kIsWeb
                    ? Image.network(
                        _imagePath!,
                        width: 300,
                        height: 300,
                        fit: BoxFit.cover,
                      )
                    : Image.file(
                        File(_imagePath!),
                        width: 300,
                        height: 300,
                        fit: BoxFit.cover,
                      ),

//TextInput พร้อมเช็ค validate
  final TextEditingController _idCamera = TextEditingController();
  final TextEditingController _ipAddress = TextEditingController();
  final TextEditingController _address = TextEditingController();
  final TextEditingController _model = TextEditingController();
  final TextEditingController _nvr = TextEditingController();
  final TextEditingController _assetCode = TextEditingController();

            child: Form(
              key: _formKey,
              child: Column(
                // crossAxisAlignment: CrossAxisAlignment.baseline,
                children: <Widget>[
                  TextFormField(
                    controller: _idCamera,
                    decoration: const InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'ชื่อกล้อง',
                    ),
                    validator: (String? value) {
                      if (value == null || value.isEmpty) {
                        return 'กรุณากรอกชื่อกล้อง';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 15.0,
                  ),
                  TextFormField(
                    controller: _ipAddress,
                    decoration: const InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'IP Address',
                    ),
                    // obscureText: true,
                    validator: (String? value) {
                      if (value == null || value.isEmpty) {
                        return 'กรุณากรอก IP Address';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 15.0,
                  ),
                  TextFormField(
                    controller: _address,
                    decoration: const InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'สถานที่',
                    ),
                    validator: (String? value) {
                      if (value == null || value.isEmpty) {
                        return 'กรุณากรอกสถานที่';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 15.0,
                  ),
                  TextFormField(
                    controller: _model,
                    decoration: const InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'ยี่ห้อ',
                    ),
                    validator: (String? value) {
                      if (value == null || value.isEmpty) {
                        return 'กรุณากรอกยี่ห้อ';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(
                    height: 15.0,
                  ),
                  TextFormField(
                    controller: _assetCode,
                    decoration: const InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'รหัสทรัพย์สิน',
                    ),
                    validator: (String? value) {
                      if (value == null || value.isEmpty) {
                        return 'กรุณากรอกรหัสทรัพย์สิน';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(
                    height: 15.0,
                  ),
                  TextFormField(
                    controller: _nvr,
                    decoration: const InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'รุ่น',
                    ),
                    validator: (String? value) {
                      if (value == null || value.isEmpty) {
                        return 'กรุณาระบุชื่อรุ่น';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(
                    height: 15.0,
                  ),
                  SizedBox(
                    width: 300,
                    height: 50,
                    child: OutlinedButton(
                      onPressed: () => _getImageFromGallery(),
                      style: OutlinedButton.styleFrom(
                          // side: const BorderSide(
                          //     width: 1,
                          //     color: Colors.black,
                          // ),
                          shape: BeveledRectangleBorder(
                        borderRadius: BorderRadius.circular(3),
                      )),
                      child: const Text('รูปภาพ',
                          textAlign: TextAlign.left,
                          style: TextStyle(
                            color: Colors.black87,
                            fontSize: 10,
                            fontWeight: FontWeight.w700,
                          )),
                    ),
                  ),
);

https://github.com/vagish1/Flutter-App.git

Future<List<String>?> uploadImage(String image) async {
    FormData formData = FormData.fromMap(
      {
        "param": "saveatt",
        "filetype": "jpg",
        "filedata": image,
        "agentcode": "",
      },
    );

    String domain2 =
        "http://61.19.77.244/reservation/promptjong/ticketapi/datamodule/promptjonapi.php";

    String urlAPI = domain2;
    var result;
    try {
      Response response = await Dio().post(urlAPI, data: formData);
      result = response.data['url'];
      urlPic = '';
      if (result != null) {
        urlPic = result;
      }
      print('return => ${response.data['url']}');
    } catch (e) {
      print('Error $e');
    }
    return result;
  }


Image.network(
                        'http://pfclapi.synology.me/~F0143/personpic/${userName.text}.jpg',
                        fit: BoxFit.cover,
                        width: 150,
                        height: 150,
                        errorBuilder: (context, error, stackTrace) {
                          return Image.asset(
                            'assets/images/notperson.png',
                            fit: BoxFit.cover,
                            width: 150,
                            height: 150,
                          );
                        },
                      ),
// อ่านรูปภาพสำหรับเว๋บ
  <script type="text/javascript">
      window.flutterWebRenderer = "html";
  </script>

//search แบบ json to datrt
  void filterSearchResults(String query) {
    List<Listcctv> dummySearchList = [];
    dummySearchList.addAll(listcctv);
    if (query.isNotEmpty) {
      List<Listcctv> dummyListData = [];
      dummySearchList.forEach((item) {
        if (item.address.toString().toLowerCase().contains(query)) {
          dummyListData.add(item);
        }
      });
      setState(() {
        filteredList.clear();
        filteredList.addAll(dummyListData);
      });
      return;
    } else {
      setState(() {
        filteredList.clear();
        filteredList.addAll(listcctv);
      });
      
    }
  }
//TextFirld
Padding(
            padding: const EdgeInsets.only(right: 50.0, left: 50.0),
            child: TextField(
              controller: _search,
              decoration: InputDecoration(
                hintText: 'beawee@gmail.com',
                labelText: 'Email',
                prefixIcon: const Icon(Icons.mail),
                suffixIcon: _search.text.isEmpty
                    ? Container(
                        width: 0.0,
                      )
                    : IconButton(
                        onPressed: () => _search.clear(),
                        icon: Icon(Icons.close),
                      ),
                // icon: Icon(Icons.mail),
                border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(5.0)),
              ),
            ),
          ),
          const SizedBox(
            height: 20.0,
          ),
          Padding(
            padding: const EdgeInsets.only(right: 50.0, left: 50.0),
            child: TextField(
              controller: _password,
              decoration: InputDecoration(
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0)),
                  labelText: 'Password',
                  hintText: 'Your Password...',
                  prefixIcon: const Icon(Icons.password),
                  suffixIcon: IconButton(
                    icon: isPassword
                        ? const Icon(Icons.visibility_off)
                        : const Icon(Icons.visibility),
                    onPressed: () => setState(() => isPassword = !isPassword),
                  )),
                  obscureText: isPassword,
            ),
          )

//DateTime
import 'package:intl/intl.dart';
  String formattedDateTime = '';

  @override
  void initState() {
    super.initState();
    DateTime now = DateTime.now();
    formattedDateTime = DateFormat('dd/MM/yyyy HH:mm:ss').format(now);
  }

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;

    return Row(
      children: [
        Padding(
          padding: const EdgeInsets.all(20),
          child: GestureDetector(
            onTap: () => setState(() => selected = !selected),
            child: AnimatedContainer(
              width: selected ? screenWidth - 40 : screenWidth / 2,
              height: selected ? screenHeight : screenHeight,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                color: selected ? Colors.amber : Colors.pink,
              ),
              duration: const Duration(seconds: 3),
              curve: Curves.fastEaseInToSlowEaseOut,
            ),
          ),
        ),
        Expanded(
          child: AnimatedSwitcher(
            duration: const Duration(seconds: 3),
            // reverseDuration: const Duration(seconds: 1),
            switchOutCurve: Curves.fastLinearToSlowEaseIn,
            child: selected
                ? const SizedBox
                    .shrink()
                : Padding(
                  padding: const EdgeInsets.only(top: 20.0, bottom: 20.0, right: 20.0),
                  child: Container(
                      key: ValueKey<bool>(selected),
                      width: screenWidth / 2,
                      height: screenHeight,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Colors.pink,
                      ),
                    ),
                ),
          ),
        ),
      ],
    );
  }
}

register /
เวลาเปิดปิด
สำหรับ agen only
ถ้าลูกค้าทั่วไป ให้ไปจองหน้าเว็บ
